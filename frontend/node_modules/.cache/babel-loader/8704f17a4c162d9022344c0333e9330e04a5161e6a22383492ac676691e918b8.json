{"ast":null,"code":"var _jsxFileName = \"/Users/sanji/AA/Seed Account/frontend/src/components/AccountManager.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { ethers } from 'ethers';\nimport './AccountManager.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction AccountManager({\n  onAccountsUpdated,\n  seedAddress,\n  soulAddress\n}) {\n  _s();\n  const [seedWallet, setSeedWallet] = useState(null);\n  const [soulWallet, setSoulWallet] = useState(null);\n  const [localSeedAddress, setLocalSeedAddress] = useState(seedAddress || '');\n  const [localSoulAddress, setLocalSoulAddress] = useState(soulAddress || '');\n  const [seedBalance, setSeedBalance] = useState('0');\n  const [status, setStatus] = useState('');\n  const [provider, setProvider] = useState(null);\n\n  // 初始化\n  useEffect(() => {\n    const initProvider = async () => {\n      // 使用公共 RPC 提供商\n      const provider = new ethers.providers.JsonRpcProvider('https://sepolia.infura.io/v3/dbe77fbac5b8494e8f03b1099638abfd');\n      setProvider(provider);\n    };\n    initProvider();\n\n    // 从本地存储加载账户\n    const loadStoredAccounts = async () => {\n      try {\n        // 加载根账户\n        const storedSeed = localStorage.getItem('seedWallet');\n        if (storedSeed) {\n          const seedData = JSON.parse(storedSeed);\n          const wallet = new ethers.Wallet(seedData.privateKey);\n          setSeedWallet(wallet);\n          setLocalSeedAddress(seedData.address);\n        }\n\n        // 加载影子账户\n        const storedSoul = localStorage.getItem('soulWallet');\n        if (storedSoul) {\n          const soulData = JSON.parse(storedSoul);\n          const wallet = new ethers.Wallet(soulData.privateKey);\n          setSoulWallet(wallet);\n          setLocalSoulAddress(soulData.address);\n        }\n      } catch (error) {\n        console.error('加载存储的账户失败:', error);\n      }\n    };\n    loadStoredAccounts();\n  }, []);\n\n  // 当props中的地址变化时，更新本地状态\n  useEffect(() => {\n    if (seedAddress) {\n      setLocalSeedAddress(seedAddress);\n    }\n    if (soulAddress) {\n      setLocalSoulAddress(soulAddress);\n    }\n  }, [seedAddress, soulAddress]);\n\n  // 当根账户或提供商变化时，检查余额\n  useEffect(() => {\n    if (localSeedAddress && provider) {\n      checkBalance();\n    }\n  }, [localSeedAddress, provider]);\n\n  // 当账户变化时，通知父组件\n  useEffect(() => {\n    if (onAccountsUpdated) {\n      onAccountsUpdated(localSeedAddress, localSoulAddress);\n    }\n  }, [localSeedAddress, localSoulAddress, onAccountsUpdated]);\n\n  // 生成新的根账户\n  const generateSeedAccount = () => {\n    try {\n      const wallet = ethers.Wallet.createRandom();\n      setSeedWallet(wallet);\n      setLocalSeedAddress(wallet.address);\n\n      // 保存到本地存储\n      localStorage.setItem('seedWallet', JSON.stringify({\n        address: wallet.address,\n        privateKey: wallet.privateKey\n      }));\n      setStatus('根账户生成成功！');\n\n      // 通知父组件\n      if (onAccountsUpdated) {\n        onAccountsUpdated(wallet.address, localSoulAddress);\n      }\n    } catch (error) {\n      console.error('生成根账户失败:', error);\n      setStatus('生成根账户失败: ' + error.message);\n    }\n  };\n\n  // 生成新的影子账户\n  const generateSoulAccount = () => {\n    try {\n      const wallet = ethers.Wallet.createRandom();\n      setSoulWallet(wallet);\n      setLocalSoulAddress(wallet.address);\n\n      // 保存到本地存储\n      localStorage.setItem('soulWallet', JSON.stringify({\n        address: wallet.address,\n        privateKey: wallet.privateKey\n      }));\n      setStatus('影子账户生成成功！');\n\n      // 通知父组件\n      if (onAccountsUpdated) {\n        onAccountsUpdated(localSeedAddress, wallet.address);\n      }\n    } catch (error) {\n      console.error('生成影子账户失败:', error);\n      setStatus('生成影子账户失败: ' + error.message);\n    }\n  };\n\n  // 检查余额\n  const checkBalance = async () => {\n    if (!localSeedAddress || !provider) return;\n    try {\n      const balanceWei = await provider.getBalance(localSeedAddress);\n      // 将 Wei 转换为 ETH，并保留 5 位小数\n      const balanceEth = parseFloat(ethers.utils.formatEther(balanceWei)).toFixed(5);\n      setSeedBalance(balanceEth);\n    } catch (error) {\n      console.error('获取余额失败:', error);\n      setStatus('获取余额失败: ' + error.message);\n    }\n  };\n\n  // 刷新余额\n  const refreshBalance = () => {\n    checkBalance();\n    setStatus('余额已刷新');\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"account-manager\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"account-card seed-account\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"\\u6839\\u8D26\\u6237 (Root Account)\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 150,\n        columnNumber: 9\n      }, this), !localSeedAddress ? /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: generateSeedAccount,\n        className: \"generate-button\",\n        children: \"\\u751F\\u6210\\u65B0\\u7684\\u6839\\u8D26\\u6237\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 152,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"account-info\",\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n            children: \"\\u5730\\u5740:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 155,\n            columnNumber: 16\n          }, this), \" \", localSeedAddress]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 155,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"balance-container\",\n          children: [/*#__PURE__*/_jsxDEV(\"p\", {\n            children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n              children: \"\\u4F59\\u989D:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 157,\n              columnNumber: 18\n            }, this), \" \", seedBalance, \" ETH\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 157,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: refreshBalance,\n            className: \"refresh-button\",\n            title: \"\\u5237\\u65B0\\u4F59\\u989D\",\n            children: \"\\uD83D\\uDD04\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 158,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 156,\n          columnNumber: 13\n        }, this), parseFloat(seedBalance) <= 0 && /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"warning\",\n          children: \"\\u8BF7\\u5411\\u6B64\\u5730\\u5740\\u53D1\\u9001\\u4E00\\u4E9B ETH \\u4F5C\\u4E3A gas \\u8D39\\uFF0C\\u4EE5\\u4FBF\\u8FDB\\u884C\\u8BA4\\u8BC1\\u64CD\\u4F5C\\u3002\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 163,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 154,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 149,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"account-card soul-account\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"\\u5F71\\u5B50\\u8D26\\u6237 (Shadow Account)\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 172,\n        columnNumber: 9\n      }, this), !localSoulAddress ? /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: generateSoulAccount,\n        className: \"generate-button\",\n        children: \"\\u751F\\u6210\\u65B0\\u7684\\u5F71\\u5B50\\u8D26\\u6237\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 174,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"account-info\",\n        children: /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n            children: \"\\u5730\\u5740:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 177,\n            columnNumber: 16\n          }, this), \" \", localSoulAddress]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 177,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 176,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 171,\n      columnNumber: 7\n    }, this), status && /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"status-message\",\n      children: status\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 182,\n      columnNumber: 18\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 148,\n    columnNumber: 5\n  }, this);\n}\n_s(AccountManager, \"ghhIYlycrb+HesUM78gnGSHLmtY=\");\n_c = AccountManager;\nexport default AccountManager;\nvar _c;\n$RefreshReg$(_c, \"AccountManager\");","map":{"version":3,"names":["React","useState","useEffect","ethers","jsxDEV","_jsxDEV","AccountManager","onAccountsUpdated","seedAddress","soulAddress","_s","seedWallet","setSeedWallet","soulWallet","setSoulWallet","localSeedAddress","setLocalSeedAddress","localSoulAddress","setLocalSoulAddress","seedBalance","setSeedBalance","status","setStatus","provider","setProvider","initProvider","providers","JsonRpcProvider","loadStoredAccounts","storedSeed","localStorage","getItem","seedData","JSON","parse","wallet","Wallet","privateKey","address","storedSoul","soulData","error","console","checkBalance","generateSeedAccount","createRandom","setItem","stringify","message","generateSoulAccount","balanceWei","getBalance","balanceEth","parseFloat","utils","formatEther","toFixed","refreshBalance","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","title","_c","$RefreshReg$"],"sources":["/Users/sanji/AA/Seed Account/frontend/src/components/AccountManager.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { ethers } from 'ethers';\nimport './AccountManager.css';\n\nfunction AccountManager({ onAccountsUpdated, seedAddress, soulAddress }) {\n  const [seedWallet, setSeedWallet] = useState(null);\n  const [soulWallet, setSoulWallet] = useState(null);\n  const [localSeedAddress, setLocalSeedAddress] = useState(seedAddress || '');\n  const [localSoulAddress, setLocalSoulAddress] = useState(soulAddress || '');\n  const [seedBalance, setSeedBalance] = useState('0');\n  const [status, setStatus] = useState('');\n  const [provider, setProvider] = useState(null);\n  \n  // 初始化\n  useEffect(() => {\n    const initProvider = async () => {\n      // 使用公共 RPC 提供商\n      const provider = new ethers.providers.JsonRpcProvider('https://sepolia.infura.io/v3/dbe77fbac5b8494e8f03b1099638abfd');\n      setProvider(provider);\n    };\n    \n    initProvider();\n    \n    // 从本地存储加载账户\n    const loadStoredAccounts = async () => {\n      try {\n        // 加载根账户\n        const storedSeed = localStorage.getItem('seedWallet');\n        if (storedSeed) {\n          const seedData = JSON.parse(storedSeed);\n          const wallet = new ethers.Wallet(seedData.privateKey);\n          setSeedWallet(wallet);\n          setLocalSeedAddress(seedData.address);\n        }\n        \n        // 加载影子账户\n        const storedSoul = localStorage.getItem('soulWallet');\n        if (storedSoul) {\n          const soulData = JSON.parse(storedSoul);\n          const wallet = new ethers.Wallet(soulData.privateKey);\n          setSoulWallet(wallet);\n          setLocalSoulAddress(soulData.address);\n        }\n      } catch (error) {\n        console.error('加载存储的账户失败:', error);\n      }\n    };\n    \n    loadStoredAccounts();\n  }, []);\n  \n  // 当props中的地址变化时，更新本地状态\n  useEffect(() => {\n    if (seedAddress) {\n      setLocalSeedAddress(seedAddress);\n    }\n    if (soulAddress) {\n      setLocalSoulAddress(soulAddress);\n    }\n  }, [seedAddress, soulAddress]);\n  \n  // 当根账户或提供商变化时，检查余额\n  useEffect(() => {\n    if (localSeedAddress && provider) {\n      checkBalance();\n    }\n  }, [localSeedAddress, provider]);\n  \n  // 当账户变化时，通知父组件\n  useEffect(() => {\n    if (onAccountsUpdated) {\n      onAccountsUpdated(localSeedAddress, localSoulAddress);\n    }\n  }, [localSeedAddress, localSoulAddress, onAccountsUpdated]);\n  \n  // 生成新的根账户\n  const generateSeedAccount = () => {\n    try {\n      const wallet = ethers.Wallet.createRandom();\n      setSeedWallet(wallet);\n      setLocalSeedAddress(wallet.address);\n      \n      // 保存到本地存储\n      localStorage.setItem('seedWallet', JSON.stringify({\n        address: wallet.address,\n        privateKey: wallet.privateKey\n      }));\n      \n      setStatus('根账户生成成功！');\n      \n      // 通知父组件\n      if (onAccountsUpdated) {\n        onAccountsUpdated(wallet.address, localSoulAddress);\n      }\n    } catch (error) {\n      console.error('生成根账户失败:', error);\n      setStatus('生成根账户失败: ' + error.message);\n    }\n  };\n  \n  // 生成新的影子账户\n  const generateSoulAccount = () => {\n    try {\n      const wallet = ethers.Wallet.createRandom();\n      setSoulWallet(wallet);\n      setLocalSoulAddress(wallet.address);\n      \n      // 保存到本地存储\n      localStorage.setItem('soulWallet', JSON.stringify({\n        address: wallet.address,\n        privateKey: wallet.privateKey\n      }));\n      \n      setStatus('影子账户生成成功！');\n      \n      // 通知父组件\n      if (onAccountsUpdated) {\n        onAccountsUpdated(localSeedAddress, wallet.address);\n      }\n    } catch (error) {\n      console.error('生成影子账户失败:', error);\n      setStatus('生成影子账户失败: ' + error.message);\n    }\n  };\n  \n  // 检查余额\n  const checkBalance = async () => {\n    if (!localSeedAddress || !provider) return;\n    \n    try {\n      const balanceWei = await provider.getBalance(localSeedAddress);\n      // 将 Wei 转换为 ETH，并保留 5 位小数\n      const balanceEth = parseFloat(ethers.utils.formatEther(balanceWei)).toFixed(5);\n      setSeedBalance(balanceEth);\n    } catch (error) {\n      console.error('获取余额失败:', error);\n      setStatus('获取余额失败: ' + error.message);\n    }\n  };\n  \n  // 刷新余额\n  const refreshBalance = () => {\n    checkBalance();\n    setStatus('余额已刷新');\n  };\n  \n  return (\n    <div className=\"account-manager\">\n      <div className=\"account-card seed-account\">\n        <h3>根账户 (Root Account)</h3>\n        {!localSeedAddress ? (\n          <button onClick={generateSeedAccount} className=\"generate-button\">生成新的根账户</button>\n        ) : (\n          <div className=\"account-info\">\n            <p><strong>地址:</strong> {localSeedAddress}</p>\n            <div className=\"balance-container\">\n              <p><strong>余额:</strong> {seedBalance} ETH</p>\n              <button onClick={refreshBalance} className=\"refresh-button\" title=\"刷新余额\">\n                🔄\n              </button>\n            </div>\n            {parseFloat(seedBalance) <= 0 && (\n              <p className=\"warning\">\n                请向此地址发送一些 ETH 作为 gas 费，以便进行认证操作。\n              </p>\n            )}\n          </div>\n        )}\n      </div>\n      \n      <div className=\"account-card soul-account\">\n        <h3>影子账户 (Shadow Account)</h3>\n        {!localSoulAddress ? (\n          <button onClick={generateSoulAccount} className=\"generate-button\">生成新的影子账户</button>\n        ) : (\n          <div className=\"account-info\">\n            <p><strong>地址:</strong> {localSoulAddress}</p>\n          </div>\n        )}\n      </div>\n      \n      {status && <p className=\"status-message\">{status}</p>}\n    </div>\n  );\n}\n\nexport default AccountManager; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}